apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook-sensor
  namespace: argo-events
spec:
  dependencies:
    - name: example-webhook
      eventSourceName: webhook-event-source
      eventName: example-webhook
  triggers:
    - template:
        name: webhook-trigger
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: webhook-workflow-
              spec:
                entrypoint: log-message
                templates:
                  - name: log-message
                    container:
                      image: alpine
                      command: [echo]
                      args: ["{{(payload)}}"]
#....................
Explicación:

apiVersion y kind:

apiVersion: argoproj.io/v1alpha1: Versión de la API.
kind: Sensor: Especifica que este recurso es un Sensor.
metadata:

name: webhook-sensor: Nombre del Sensor.
namespace: argo-events: Espacio de nombres.
spec:

dependencies:

Lista de eventos que el Sensor está esperando.
- name: example-webhook: Nombre de la dependencia.
eventSourceName: webhook-event-source: Nombre del EventSource que genera el evento.
eventName: example-webhook: Nombre del evento específico dentro del EventSource.
triggers:

Lista de acciones que se ejecutarán cuando se reciban los eventos.
template:
name: webhook-trigger: Nombre del trigger.
argoWorkflow:
group, version, resource: Identifican el tipo de recurso de Kubernetes que se gestionará (un Workflow de Argo Workflows).
operation: submit: Acción a realizar, en este caso, enviar (crear y ejecutar) el Workflow.
source:
resource:
apiVersion, kind: Definen el tipo de recurso que se creará (un Workflow).
metadata:
generateName: webhook-workflow-: Prefijo para el nombre del Workflow generado.
spec:
entrypoint: log-message: Punto de entrada del Workflow.
templates: Define las tareas del Workflow.
- name: log-message: Nombre de la tarea.
container:
image: alpine: Imagen de Docker a utilizar.
command: [echo]: Comando a ejecutar.
args: ["{{(payload)}}"]: Argumentos del comando. Aquí estamos utilizando {{(payload)}} para imprimir la carga útil recibida en el evento.
Función:

El Sensor espera a que se reciba un evento example-webhook desde el EventSource webhook-event-source. Cuando esto ocurre, el Sensor desencadena el trigger webhook-trigger, que envía (submits) un Workflow a Argo Workflows. El Workflow simplemente ejecuta un contenedor de Alpine que imprime el contenido del payload del evento usando el comando echo.
